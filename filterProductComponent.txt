const PRODUCTS = [
    {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},
    {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},
    {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},
    {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},
    {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},
    {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}
  ];

// ProductCategoryRow component which renders categories of the products
class ProductCategoryRow extends React.Component {
    render(){
        const category = this.props.category;

        return(
            <tr>
                <th colSpan="2">{category}</th>
            </tr>
        )
    }
}  

// ProductRow component which renders name and price columns of the products
class ProductRow extends React.Component {
    
    render() {
        const product = this.props.product;
        const name = product.stocked ? product.name : <span style= {{color:'red'}}>{product.name}</span>
        
        return(
            <tr>
                <td>{name}</td>
                <td>{product.price}</td>
            </tr>
        )
    }
}

/*
* ProductTable component where ProductCategoryRow and ProductRow components are called
* Lists according to filters provided inside props
*/
class ProductTable extends React.Component {

    render() {
        const filterText = this.props.filterText;
        const inStockOnly = this.props.inStockOnly;
        const rows = [];
        let productCategory = "";
        const searchExp = new RegExp(filterText, "gi");
        this.props.products.forEach((product) => {
            
            if(product.name.toLowerCase().search(searchExp) === -1) {
                return;
            }

            if(inStockOnly && !product.stocked) {
                return;
            }

            if(product.category !== productCategory) {
                rows.push(<ProductCategoryRow category={product.category} key={product.category} />)
            }
            rows.push(
                <ProductRow product={product} key={product.name} />
            )

            productCategory = product.category;
        });

        return(
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>{rows}</tbody>
            </table>    
        )
    }
}

// Searchbar component is to handle search texts and checkbok check uncheck to get stocked product
class Searchbar extends React.Component {

    constructor(props){
        super(props);

        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);
        this.handleInStockChange = this.handleInStockChange.bind(this);
    }

    handleFilterTextChange(e) {
        this.props.onFilterTextChange(e.target.value);
    }

    handleInStockChange(e) {
        this.props.onInStockChange(e.target.checked);
    }

    render() {
        return(
            <form>
                <input type="text" value={this.props.filterText} placeholder="Search..." onChange={this.handleFilterTextChange} />
                <p>
                    <input type="checkbox" checked={this.props.inStockOnly} onChange={this.handleInStockChange}/> Only show products in stock
                </p>    
            </form>    
        )
    }
}  

// FilterableProductTable component which is the stateful parent component of all other components
class FilterableProductTable extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            filterText: '',
            inStockOnly: false
        };
        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);
        this.handleInStockChange = this.handleInStockChange.bind(this);
    }

    handleFilterTextChange(value) {
        this.setState({
            filterText: value
        })
    }

    handleInStockChange(inStock) {
        this.setState({
            inStockOnly: inStock
        })
    }

    render() {
        return(
            <div>
                <Searchbar filterText={this.state.filterText} inStockOnly={this.state.inStockOnly} onFilterTextChange={this.handleFilterTextChange}
                onInStockChange={this.handleInStockChange} />
                <ProductTable products={this.props.products} filterText={this.state.filterText} inStockOnly={this.state.inStockOnly} />
            </div>
        )
    }
}  

// Rendering of App component will give the final result on UI
class App extends React.Component {
    render() {
        return(
            <FilterableProductTable products={PRODUCTS} />
        )
    }
}
